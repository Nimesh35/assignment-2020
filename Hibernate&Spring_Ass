1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
   -->
   
   student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
-------------------

student_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
-------------------------------------------------------

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>

-----------------------------------------------------------------------------------------------------------------------------------------------------------
student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 10:50:01 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="studentdetails">
        <id name="id" type="int">
            <column name="id" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="rollno" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="name" />
        </property>
        <property name="age" type="int">
            <column name="age" />
        </property>
    </class>
</hibernate-mapping>
   
   
   
   =======================================================================================================================================================================
2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
   
   *hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>
------------------
*student2.java

package pack;

public class Student2 {
	public int sno;
	public int studentRollno,age;
	public String name;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int getStudentRollno() {
		return studentRollno;
	}
	public void setStudentRollno(int studentRollno) {
		this.studentRollno = studentRollno;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}
------------------
*student2.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="pack.Student2" table="STUDENT2">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="assigned" />
        </id>
        <property name="studentRollno" type="int">
            <column name="STUDENTROLLNO" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>
------------------------

*st2.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class St2 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ROLLNO : ");
		int ro = sc.nextInt();
		
		System.out.println("ENTER THE NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER THE AGE : ");
		int ag = sc.nextInt();
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Student2 st2 = new Student2();
		
		st2.setStudentRollno(ro);
		
		st2.setName(nm);
		
		st2.setAge(ag);
		
		s.save(st2);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
		System.out.println("RECORD INSERTED SUCCESSFULLY......");
		}
	}
   
   =====================================================================================================================================================================
3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.
-->

*hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>


*Amount.java

package pack;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "amount")
public class Amount {

	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
    public int sno;
    public int accno;
    
    public String name,acctype;
    
    public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int getAccno() {
		return accno;
	}

	public void setAccno(int accno) {
		this.accno = accno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAcctype() {
		return acctype;
	}

	public void setAcctype(String acctype) {
		this.acctype = acctype;
	}

	
}
*A1.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class A1 {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ACCOUNT NUMBER : ");
		int ro = sc.nextInt();
				
		sc.nextLine();
		
		System.out.println("ENTER THE ACCOUNT NAME : ");
		String nm = sc.nextLine();
						
		System.out.println("ENTER THE ACCOUNT TYPE : ");
		String ag = sc.nextLine();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Amount.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Amount am = new Amount();
		
		am.setAccno(ro);
		
		am.setName(nm);
		
		am.setAcctype(ag);
		
		s.save(am);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
	    System.out.println("RECORD SUCCESSFULLY INSERTED");
	}

}
=======================================================================================================================================================================
4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
   
  *hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property> 
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="prod1.hbm.xml"/>
         <mapping resource="POJO.hbm.xml" />
    </session-factory>
</hibernate-configuration>

*Pojo.java

package ASSIGNMENTS;

public class POJO {

	public int sno;
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String usnm,pswd;

	public String getUsnm() {
		return usnm;
	}

	public void setUsnm(String usnm) {
		this.usnm = usnm;
	}

	public String getPswd() {
		return pswd;
	}

	public void setPswd(String pswd) {
		this.pswd = pswd;
	}
	
	
}

*Pojo.hm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="ASSIGNMENTS.POJO" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="usnm" type="java.lang.String">
            <column name="USNM" />
        </property>
        <property name="pswd" type="java.lang.String">
            <column name="PSWD" />
        </property>
    </class>
</hibernate-mapping>

*a.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv1">
USERNAME <input type="text" name="us">
PASSWORD <input type="password" name="pass">
<input type="submit" value="ENTER">
</form>
</body>
</html>

*Servelet 1
package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	PrintWriter out = response.getWriter();
	
	String us = request.getParameter("us");
	
	String pa = request.getParameter("pass");
	SessionFactory sf = new Configuration().configure().buildSessionFactory();
	
	Session s = sf.openSession();
	
	s.beginTransaction();
	
	POJO p = new POJO();
	p.setSno(101);

	p.setUsnm(us);
	
	p.setPswd(pa);
	
	s.save(p);
	
	s.getTransaction().commit();
	
	s.close();
	
	sf.close();
	
	out.print("TABLE CREATED AND RECORD SUCCESSFULLY INSERTED...................");
	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

*b.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv2">
ID <input type="text" name="id">
PASSWORD<input type="password" name="pass">
<input type="submit" value="SUBMIT">
</form>
</body>
</html>

*Servelet 2
package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv2 extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		int sno = Integer.parseInt(request.getParameter("id"));		
		
		String pa = request.getParameter("pass");
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		POJO p = s.get(POJO.class, sno);

		p.setPswd(pa);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("PASSWORD UPDATED");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
=========================================================================================================================================================================
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 
6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.
7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products.
9. Write a spring configuration file which injects the username, email and password to the Bean class User.
10. Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.
11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
    Student and manager.
14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
    in the database .After submitting data , display the message "Registration Successful".
15  Make a program to apply constructor injection using XML and Annotation.
-->

*Fortuneservice.java

package ass15;

public interface Fortuneservice {

 public String getFortune();

}
----------------------
*HappyFortuneService.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneService implements Fortuneservice{

 @Override
public String getFortune() {
// TODO Auto-generated method stub
return "its Your lucky day";
}

}
---------------------------
*Pen.java

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

 public Fortuneservice fs;
// Constructor injection using @Autowired

@Autowired
public Pen(Fortuneservice fs) {
super();
this.fs = fs;
}

// Setter injection using @Autowired
/*
@Autowired

public void setFs(FortuneService fs) {
this.fs = fs;
}
*/
@Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Pen";
}


 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return fs.getFortune();
}


}
---------------------------
*Scale.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

 @Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Scale";
}

 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return null;
}

}
------------
*Stationery.java

package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();

}
------------
*TestApp.java

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

 public static void main(String[] args) {

 ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("Ass15applicationContext2.xml");

Stationery s=context.getBean("pen",Stationery.class);

 System.out.println(s.getDetails());
System.out.println(s.getyourFortune());
context.close();
}

}

=============================================================================================================================================================
16  Make a program to apply Setter injection using XML and Annotation.

-->

*Fortuneservice.java

package ass15;

public interface Fortuneservice {

 public String getFortune();

}
----------------------
*HappyFortuneService.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneService implements Fortuneservice{

 @Override
public String getFortune() {
// TODO Auto-generated method stub
return "its Your lucky day";
}

}
---------------------------
*Pen.java

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

 public Fortuneservice fs;
// Constructor injection using @Autowired
/*
@Autowired
public Pen(Fortuneservice fs) {
super();
this.fs = fs;
}
*/
// Setter injection using @Autowired

@Autowired

public void setFs(FortuneService fs) {
this.fs = fs;
}

@Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Pen";
}


 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return fs.getFortune();
}


}
---------------------------
*Scale.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

 @Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Scale";
}

 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return null;
}

}
------------
*Stationery.java

package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();

}
------------
*TestApp.java

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

 public static void main(String[] args) {

 ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("Ass15applicationContext2.xml");

Stationery s=context.getBean("pen",Stationery.class);

 System.out.println(s.getDetails());
System.out.println(s.getyourFortune());
context.close();
}

}


























