1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
   -->
   
   student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
-------------------

student_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
-------------------------------------------------------

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>

-----------------------------------------------------------------------------------------------------------------------------------------------------------
student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 10:50:01 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="studentdetails">
        <id name="id" type="int">
            <column name="id" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="rollno" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="name" />
        </property>
        <property name="age" type="int">
            <column name="age" />
        </property>
    </class>
</hibernate-mapping>
   
   
   
   =======================================================================================================================================================================
2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
   
   *hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>
------------------
*student2.java

package pack;

public class Student2 {
	public int sno;
	public int studentRollno,age;
	public String name;
	public int getSno() {
		return sno;
	}
	public void setSno(int sno) {
		this.sno = sno;
	}
	public int getStudentRollno() {
		return studentRollno;
	}
	public void setStudentRollno(int studentRollno) {
		this.studentRollno = studentRollno;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}
------------------
*student2.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="pack.Student2" table="STUDENT2">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="assigned" />
        </id>
        <property name="studentRollno" type="int">
            <column name="STUDENTROLLNO" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>
------------------------

*st2.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class St2 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ROLLNO : ");
		int ro = sc.nextInt();
		
		System.out.println("ENTER THE NAME : ");
		String nm = sc.nextLine();
		
		System.out.println("ENTER THE AGE : ");
		int ag = sc.nextInt();
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Student2 st2 = new Student2();
		
		st2.setStudentRollno(ro);
		
		st2.setName(nm);
		
		st2.setAge(ag);
		
		s.save(st2);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
		System.out.println("RECORD INSERTED SUCCESSFULLY......");
		}
	}
   
   =====================================================================================================================================================================
3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.
-->

*hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Student.hbm.xml" />
        <mapping resource="Student2.hbm.xml" />
    </session-factory>
</hibernate-configuration>


*Amount.java

package pack;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "amount")
public class Amount {

	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
    public int sno;
    public int accno;
    
    public String name,acctype;
    
    public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int getAccno() {
		return accno;
	}

	public void setAccno(int accno) {
		this.accno = accno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAcctype() {
		return acctype;
	}

	public void setAcctype(String acctype) {
		this.acctype = acctype;
	}

	
}
*A1.java

package pack;

import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class A1 {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in); 
		System.out.println("ENTER THE ACCOUNT NUMBER : ");
		int ro = sc.nextInt();
				
		sc.nextLine();
		
		System.out.println("ENTER THE ACCOUNT NAME : ");
		String nm = sc.nextLine();
						
		System.out.println("ENTER THE ACCOUNT TYPE : ");
		String ag = sc.nextLine();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Amount.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Amount am = new Amount();
		
		am.setAccno(ro);
		
		am.setName(nm);
		
		am.setAcctype(ag);
		
		s.save(am);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		sc.close();
		
	    System.out.println("RECORD SUCCESSFULLY INSERTED");
	}

}
=======================================================================================================================================================================
4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
  --> 
  *hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property> 
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="prod1.hbm.xml"/>
         <mapping resource="POJO.hbm.xml" />
    </session-factory>
</hibernate-configuration>

*Pojo.java

package ASSIGNMENTS;

public class POJO {

	public int sno;
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String usnm,pswd;

	public String getUsnm() {
		return usnm;
	}

	public void setUsnm(String usnm) {
		this.usnm = usnm;
	}

	public String getPswd() {
		return pswd;
	}

	public void setPswd(String pswd) {
		this.pswd = pswd;
	}
	
	
}

*Pojo.hm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="ASSIGNMENTS.POJO" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="usnm" type="java.lang.String">
            <column name="USNM" />
        </property>
        <property name="pswd" type="java.lang.String">
            <column name="PSWD" />
        </property>
    </class>
</hibernate-mapping>

*a.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv1">
USERNAME <input type="text" name="us">
PASSWORD <input type="password" name="pass">
<input type="submit" value="ENTER">
</form>
</body>
</html>

*Servelet 1
package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	PrintWriter out = response.getWriter();
	
	String us = request.getParameter("us");
	
	String pa = request.getParameter("pass");
	SessionFactory sf = new Configuration().configure().buildSessionFactory();
	
	Session s = sf.openSession();
	
	s.beginTransaction();
	
	POJO p = new POJO();
	p.setSno(101);

	p.setUsnm(us);
	
	p.setPswd(pa);
	
	s.save(p);
	
	s.getTransaction().commit();
	
	s.close();
	
	sf.close();
	
	out.print("TABLE CREATED AND RECORD SUCCESSFULLY INSERTED...................");
	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

*b.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv2">
ID <input type="text" name="id">
PASSWORD<input type="password" name="pass">
<input type="submit" value="SUBMIT">
</form>
</body>
</html>

*Servelet 2
package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv2 extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		int sno = Integer.parseInt(request.getParameter("id"));		
		
		String pa = request.getParameter("pass");
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		POJO p = s.get(POJO.class, sno);

		p.setPswd(pa);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("PASSWORD UPDATED");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
=========================================================================================================================================================================
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 
-->


*Records.java
 
 package Package1;

public class Records 

{
	
	private String ename;
	
	private int eid;
	
	private int salary;

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public Records(String ename, int eid, int salary) {
		super();
		this.ename = ename;
		this.eid = eid;
		this.salary = salary;
	}

	public Records() {
		super();
	}
}
-------------------
    * Insert.java
     
     package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Insert {

	public static void main(String[] args) 
	
	{
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
        Session s=sf.openSession();
		
		Transaction t=s.beginTransaction();
		
		Records r=new Records();
		
		r.setEname("Ram");
		
		r.setEid(201);
		
		r.setSalary(100000);
		
		s.saveOrUpdate(r);
		
		t.commit();
		s.close();
		sf.close();
		
		System.out.println("COMPLETED");
		
		
	}

}
------------------------------
    * RecordsUpdation.java
     
     package Package1;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class RecordsUpdation {

	public static void main(String[] args)
	
	{
		
        SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		// Updating The Specific Record 
		//Query q=s.createQuery("update Records set ename='Ravi' where ename='OM'");
		
		
		// Deleting The Specific Record
		Query q=s.createQuery("delete from Records where ename='Ravi'");
		
		q.executeUpdate();
		
		s.getTransaction();
		
		s.close();
		 
		sf.close();
		
		System.out.println("RECORD UPDATED SUCCESSFULLY");
		
	}

}
-------------
   * hibernate.cfg.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Records.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
==========================================================================================================
   Records.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 23 Feb, 2021 6:28:35 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Records" table="ASSIGNMENT5">
        <id name="eid" type="int">
            <column name="EID" />
            <generator class="assigned" />
        </id>
        <property name="ename" type="java.lang.String">
            <column name="ENAME" />
        </property>
        <property name="salary" type="int">
            <column name="SALARY" />
        </property>
    </class>
</hibernate-mapping>

==========================================================================================================================================================
6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.
==============================================================================================================================================================
7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
-->   
   Bank interface
package a7;

public interface Bank {
	public String Name();
	public int Rate();
	

}
----------------
ICICI Bank--

package a7;

public class ICICI implements Bank {

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "ICICI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		return 500;
	}

	

}
------------------------

IDBI Bank
package a7;

public class IDBI implements Bank{

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "IDBI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		return 900;
	}

	

}
---------------------

interface

package a7;

public interface InterestRate {
	
	public int getRate();

}
---------------------
class

package a7;

public class Rate implements InterestRate {

	@Override
	public int getRate() {
		// TODO Auto-generated method stub
		return 600;
	}

}
--------------

SBI class

package a7;

import org.pro1.FortuneService;

public class SBI implements Bank {

	
	private InterestRate Is;

	
	
	
	public SBI(InterestRate is) {
		super();
		Is = is;
	}

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "SBI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		
		return Is.getRate();
	}

	
	

}
------------------------
testclass

package a7;

import org.pro.Car;
import org.pro1.Coach;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestBannk {

	public static void main(String[] args) {
	
				ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext3.xml");
				
			
			
				
		
				Bank b=context.getBean("mybank",Bank.class);
				
				
				
			System.out.println("Bank Name: "+b.Name());
				
		
			
			System.out.println("Bank Rate : "+b.Rate());
			
		
			
			
				
			context.close();
		

	}

}-------------------
applicationContext3.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
 
       <!--   <bean id="mybank" class="a7.SBI"></bean>     --> 
   
 
    
     <!-- Configure dependency here -->
    <bean id="InterestRate" class="a7.Rate"></bean>
    
    
      <!-- inject dependency here -->
      
      
    <bean id="mybank" class="a7.SBI">
    <constructor-arg ref="InterestRate"></constructor-arg>
    
    </bean>

</beans>

=================================================================================================================================================================
8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products.
   -->
  ====================================================================================================================================================== 
9. Write a spring configuration file which injects the username, email and password to the Bean class User.

-->

*file1.java

     package Package1;

public class file1 

{
	
	public String username;
	
	public String email;
	
	public int password;
	
	public int i1;
	
	public int getI1() {
		return i1;
	}

	public void setI1(int i1) {
		this.i1 = i1;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public int getPassword() {
		return password;
	}

	public void setPassword(int password) {
		this.password = password;
	}

	public file1(String username, String email, int password) {
		super();
		this.username = username;
		this.email = email;
		this.password = password;
	}

	public file1() {
		super();
	}
	
	public String v1()
	
	{
	
		return i1.status();
		
	}
}
--------------------

   Store.java
   
   package Package1;

public class Store implements Interface

{

	@Override
	public String status() 
	
	{
		
		return "COMPLETED";
	}
	
	@Override
	public String getusername() 
	
	{
		
		return "Nimesh";
	}
	
	@Override
	public String getemail() 
	
	{
		
		return "nimeshudayan3@gmail.com"
	}
	
	@Override
	public String getpassword() 
	
	{
		
		return "nimesh123
	}
}
-------------------

 *  Interface.java
    
    package Package1;

public interface Interface 

{

	public String getusername;
	
	public String getemail;
	
	public int getpassword;
	
	public String status();
	
}
-------------------

   * Test.java
    
    package Package1;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestFile {

	public static void main(String[] args) 
	
	{
		
		ClassPathXmlApplicationContext cs = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		file1 f1 = cs.getBean("f",file1.class);
		
		System.out.println(f1.getUsername());
		
		System.out.println(f1.getEmail());
		
		System.out.println(f1.getPassword());
		
		System.out.println(f1.status());
		
		cs.close();

		}

===================================================================================================================================================================
10. Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.

-->

C1.java

      package Package1;

public class C1 

{

	public String v1;

	public String getV1() 
	{
		return v1;
	}

	public void setV1(String v1) 
	{
		this.v1 = v1;
	}
	
	public void getmsg()
	{
		v1.getmsg();
	}
	
}
------------

     C2.java
     
     package Package1;

public class C2 

{

	public String v2;

	public String getV2() 
	{
		return v2;
	}

	public void setV2(String v2)
	{
		this.v2 = v2;
	}
	
	public void getmsg()
	{
		v2.getmsg();
	}
	
}
---------

    Class1.java
    
    package Package1;

public class Class1 implements Interface

{

	@Override
	public void getmsg() 
	
	{
		
		System.out.println("COMPLETED");
		
	}

	
	
}
------------

   *TestMain.java
    
    package Package1;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;

public class TestMain {

	public static void main(String[] args) 
	
	{
		
		XmlBeanFactory bf = new XmlBeanFactory(new ClassPathResource("ApplicationContext.xml"));
		
		C1 c1 = bf.getBean("C1",C1.class);
		
		c1.getmsg();
		
		C2 c2 = bf.getBean("C2",C2.class);
		
		c2.getmsg();
		
		System.out.println(c1);
		
		System.out.println(c2);

		

	}

}
-------------

   *Interface.java
    
    package Package1;

public interface Interface 

{

	public void getmsg();
	
}
--------------

    *AplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="class" class="Class1"  />
    
    <bean id="bean1" class="C1" >
    <property name="v1" ref="class" />
    </bean>
    
    <bean id="bean2" class ="C2" >
    <property name="v2" ref="class" />
    </bean>
    
    =======================================================================================================================================================
11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
    
    -->
    
    Pro1.java

     package Package1;

import java.util.Scanner;

public class Pro1 

{

	public String FirstName;
	
	public String LastName;
	
	Scanner sc;

	public String getFirstName() {
		return FirstName;
	}

	public void setFirstName(String firstName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER FIRST NAME : ");
		String fm = sc.nextLine();
		this.FirstName = fm;
	}

	public String getLastName() {
		return LastName;
	}

	public void setLastName(String lastName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER LAST NAME : ");
		String lm = sc.nextLine();
		this.LastName = lm;
	}
	
	
	
}
=================================================================================

    Class1.java
    
    package Package1;

public class Class1 

{

	public int age;

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
	
	FullName fn;
	
	public FullName getFn() {
		return fn;
	}

	public void setFn(FullName fn) {
		this.fn = fn;
	}

	public void setnames()
	{
		fn.setFnm();
		fn.setLnm();
	}
	
	public String getfname()
	{
		return fn.getFnm();
	}
	
	public String getlname()
	{
		return fn.getLnm();
	}
	
	
}
----------

   *TestMain.java
    
    package Package1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS11.xml");
		
		Pro1 p = ac.getBean("p1",Pro1.class);
		
		p.setAge(18);
		
		System.out.println(p1.getAge());
		
		p.setnames();
		
		System.out.println("PERSON NAME : "+p.getfname()+" "+p.getlname());
		
	}

}
-----------

   *ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="i2" class="Class1" >
    </bean>
    
    <bean id="i1" class="Pro1" >
    <property name="fn"  ref="i2"></property>
    </bean>
    
    ==================================================================================================================================================================
12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
    Student and manager.
    -->
    
   *Bean1.java

      package Package1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("bean")
public class Bean1 
{

	@Autowired
	@Qualifier("student")
	public void p1;

	public void getpnm() 
	{
		
		p1.getdetails();
		p1.showdetails();
		
	}
	
	@Autowired
	@Qualifier("manager")
	public void p2;
	
	public void getmnm()
	{
		p2.getdetails();
		p2.showdetails();
	}
}
---------------

   *manager.java
     
     package Package1;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class manager 

{

	public String nm;
	public int id;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER MANAGER NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER MANAGER ID : ");
	int i = sc.nextInt();
	
	setNm(nam);
	setId(i);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm());
    System.out.println(getId());
	}
	
}
-------------
   *student.java
     
     package Package1;

import java.util.Scanner;

import org.springframework.stereotype.Component;

@Component
public class student implements Interface

{

	public String nm;
	public int percent;
	
	public String getNm() {
		return nm;
	}

	public void setNm(String nm) {
		this.nm = nm;
	}

	public int getPercent() {
		return percent;
	}

	public void setPercent(int percent) {
		this.percent = percent;
	}

	@Override
	public void getdetails() {
	Scanner sc = new  Scanner(System.in);
	
	System.out.println("ENTER STUDENT NAME : ");
	String nam = sc.nextLine();
	
	System.out.println("ENTER  PERCENTAGE : ");
	int per = sc.nextInt();
	
	setNm(nam);
	setPercent(per);
	
	}

	@Override
	public void showdetails() {
	System.out.println(getNm()+" ");
    System.out.println(getPercent());
	}

	
}
---------------
      *Testmain.java
      
      package Package1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args)
	
	{
	
		
			ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS13.xml");
			
			Bean1 b1 = ac.getBean("bean",Bean1.class);
			
			Bean1 b2 = ac.getBean("bean",Bean1.class);
			
			b1.getpnm();
			
			b2.getmnm();
			
			}
       }
}
--------------

     *nterface.java
     
     package Package1;

public interface Interface 
{

	public  void getdetails();
	
	public void showdetails();
	
}
--------

   *ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="Package1"></context:component-scan>
</beans>
====================================================================================================================================================
14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
    in the database .After submitting data , display the message "Registration Successful".
15  Make a program to apply constructor injection using XML and Annotation.
-->

*Fortuneservice.java

package ass15;

public interface Fortuneservice {

 public String getFortune();

}
----------------------
*HappyFortuneService.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneService implements Fortuneservice{

 @Override
public String getFortune() {
// TODO Auto-generated method stub
return "its Your lucky day";
}

}
---------------------------
*Pen.java

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

 public Fortuneservice fs;
// Constructor injection using @Autowired

@Autowired
public Pen(Fortuneservice fs) {
super();
this.fs = fs;
}

// Setter injection using @Autowired
/*
@Autowired

public void setFs(FortuneService fs) {
this.fs = fs;
}
*/
@Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Pen";
}


 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return fs.getFortune();
}


}
---------------------------
*Scale.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

 @Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Scale";
}

 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return null;
}

}
------------
*Stationery.java

package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();

}
------------
*TestApp.java

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

 public static void main(String[] args) {

 ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("Ass15applicationContext2.xml");

Stationery s=context.getBean("pen",Stationery.class);

 System.out.println(s.getDetails());
System.out.println(s.getyourFortune());
context.close();
}

}

=============================================================================================================================================================
16  Make a program to apply Setter injection using XML and Annotation.

-->

*Fortuneservice.java

package ass15;

public interface Fortuneservice {

 public String getFortune();

}
----------------------
*HappyFortuneService.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneService implements Fortuneservice{

 @Override
public String getFortune() {
// TODO Auto-generated method stub
return "its Your lucky day";
}

}
---------------------------
*Pen.java

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

 public Fortuneservice fs;
// Constructor injection using @Autowired
/*
@Autowired
public Pen(Fortuneservice fs) {
super();
this.fs = fs;
}
*/
// Setter injection using @Autowired

@Autowired

public void setFs(FortuneService fs) {
this.fs = fs;
}

@Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Pen";
}


 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return fs.getFortune();
}


}
---------------------------
*Scale.java

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

 @Override
public String getDetails() {
// TODO Auto-generated method stub
return "Message from Scale";
}

 @Override
public String getyourFortune() {
// TODO Auto-generated method stub
return null;
}

}
------------
*Stationery.java

package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();

}
------------
*TestApp.java

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

 public static void main(String[] args) {

 ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("Ass15applicationContext2.xml");

Stationery s=context.getBean("pen",Stationery.class);

 System.out.println(s.getDetails());
System.out.println(s.getyourFortune());
context.close();
}

}
==================================================================================================================================================================
17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.
18  Create bean class Student and access the functionality in the Student class without using any XML configuration file. Use Java code to define configuration.

-->

*Student.java

Package1;

public class student implements c1{

	public String getmsg() 
	
	{
	
		return "THIS IS A MESSAGE";
		
	}

}

================================================================================================
*c1.java

Package1;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class c1

{

	@Bean
	public c1 student()
	{
		return new student();
	}
}

------------

*Interface1.java

Package1;

public interface Interface1

{

	public String getmsg();
}
----------------
*TestMain.java
             

Package1;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	{
	
	AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(myconfig.class);

	classroom cl = ac.getBean("student",student.class);
	
	System.out.println(cl.getmsg());
	
	}

}


=================================================================================================================================================================
19. Create an advice which is printing the output on a pointcut method showMessage as following : 
     1234567891011        ( should come from advice1 )
     Welcome from method  ( Message from Bean Class method )
     ************         ( should come from advice2 )
20. Write a configuration class to inject a dependency of one bean class into another bean class using setter injection. BeanA and BeanB are the bean classes.
    BeanA has a method which accepts a number and returns the cube value of the number. Inject the BeanA into BeanB and BeanB has a method which accepts a number and
    returns the square value of the number. Print the Square and cube.
    ================================================================================================================================================================
    21. Create a simple hibernate project without Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
Pojo.java

     package Package1;

public class Pojo 

{

	public int userid;
	
	public String username;
	
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Pojo(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Pojo() {
		super();
	}
}
============================================================================================

     TestMain.java
    package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
	    SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Pojo p1=new Pojo();
		
		p1.setUserid(201);
		
		p1.setUsername("Nimesh");
			
		p1.setUsercity("Kerala");
	
        s.save(p1);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("DATA IS :"+p1.getUserid()+" "+p1.getUsername()+" "+p1.getUsercity());
	}

}
--------------

     hibernate.cfg.xml
     
     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
          <mapping resource="Pojo.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
----------------

   Pojo.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 11:04:37 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Pojo" table="POJO">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
==========================================================================================================================================================================

22. Create a simple hibernate project with Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
    
 Pojo.java

     package Package1;

public class Pojo 

{

	public int userid;
	
	public String username;
	
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Pojo(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Pojo() {
		super();
	}
}
-------------------

    TestMain.java
    
    package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
	    SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Pojo p1=new Pojo();
		
		p1.setUserid(201);
		
		p1.setUsername("Nimesh");
		
		p1.setUsercity("Kerala");
		
        s.save(p1);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("DATA IS :"+p1.getUserid()+" "+p1.getUsername()+" "+p1.getUsercity());
	}

}
----------------------

     Pojo.hbm.xml
     
     <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 12:21:03 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Pojo" table="POJO2">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
------------------------------

   hibernate.cfg.xml
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Pojo.hbm.xml"/>
    </session-factory>
</hibernate-configuration>

========================================================================================================================================================================

23. Create a simple hibernate project without Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
-->    
  Pojo.java

      package Package2;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "Assign23")
public class Pojo 

{

	@Id
	@Column(name = "UserId")
	public int userid;
	
	@Column(name = "UserName")
	public String username;
	
	@Column(name = "UserCity")
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Pojo(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Pojo() {
		super();
	}
}
-----------------

    TestMain.java
    
    package Package2;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(Pojo.class).buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Pojo p1=new Pojo();
		
		p1.setUserid(201);
		p1.setUsername("Nimesh");
		p1.setUsercity("Kerala");
		
		s.save(p1);
		
		s.getTransaction().commit();
		
		s.close();
		sf.close();
		
		System.out.println("DATA IS :"+p1.getUserid()+" "+p1.getUsername()+" "+p1.getUsercity());
	}

}
----------------

     hibernate.cfg.xml
     
     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
    </session-factory>
</hibernate-configuration>
==========================================================================================================================================================================

24. Create a simple hibernate project with Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
-->    
.  POJO.java

      package Assi24;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "ASSI23")
public class POJO 

{

	@Id
	@Column(name = "UserId")
	public int userid;
	
	@Column(name = "UserName")
	public String username;
	
	@Column(name = "UserCity")
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public POJO(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public POJO() {
		super();
	}
}
-------------------

     TestMain.java
     
     package Assi24;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(POJO.class).buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		POJO p1=new POJO();
		
		p1.setUserid(201);
		p1.setUsername("Nimesh");
		p1.setUsercity("Kerala");
		
		s.save(p1);
		
		s.getTransaction().commit();
		
		s.close();
		sf.close();
		
		System.out.println("DATA IS :"+p1.getUserid()+" "+p1.getUsername()+" "+p1.getUsercity());
	}

}
------------------------

     hibernate.cfg.xml
     
     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Pojo.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
    
    ================================================================================================================================================
25. Create a dynamic hibernate project without Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Console.
    
ANS. Users.java

     package Package1;

public class Users 

{

    public int userid;
	
	public String username;
	
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Users(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Users() {
		super();
	}	
}
-------------

    TestMain.java
    
    package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		   SessionFactory sf=new Configuration().configure().buildSessionFactory();
			
			Session s=sf.openSession();
			
			s.beginTransaction();
			
			Users u1=new Users();
			
			u1.setUserid(101);
			
			u1.setUsername("VISHAL");
				
			u1.setUsercity("PUNE");
		
	        s.save(u1);
			
			s.getTransaction().commit();
			
			s.close();
			
			sf.close();
			
			System.out.println("DATA IS :"+u1.getUserid()+" "+u1.getUsername()+" "+u1.getUsercity());
				
	}

}
---------------

      Users.hbm.xml
      
      <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 3:19:56 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Users" table="TABLE25">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
--------------

    hibernate.cfg.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource = "Users.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
========================================================================================================================================================================

26. Create a dynamic hibernate project with Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Web Page.
-->    
  Users.java

      package Assi26;

public class Users 

{

    public int userid;
	
	public String username;
	
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Users(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Users() {
		super();
	}
}
---------------------

     TestApp.java
     
     package Assi26;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import Package1.Pro1;

/**
 * Servlet implementation class TestApp
 */
public class TestApp extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TestApp() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out=response.getWriter();
		
		int ui=Integer.parseInt(request.getParameter("ui"));
		
		String un=request.getParameter("un");
		
		String uc=request.getParameter("uc");
		
	    Users u1=new Users();
	    
	    u1.setUserid(ui);
	    
	    u1.setUsername(un);
	    
	    u1.setUsercity(uc);
			
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		s.save(u1);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("DATA IS :"+u1.getUserid()+" "+u1.getUsername()+" "+u1.getUsercity());
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
--------------

      Users.jsp
      
      <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<form action="TestApp" method="get">

USERID <input type="number" name="ui"><br>
<br>

USERNAME <input type="text" name="un"><br>
<br>

USERCITY <input type="text" name="uc"><br>
<br>

<input type="submit" value="SUBMIT DETAILS">

</body>
</html>
------------------

    Users.hbm.xml
    
    <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 4:03:28 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Assi26.Users" table="TABLE26">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
------------------

   hibernate.cfg.xml
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory> 
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Users.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
==========================================================================================================================================================================

27. Create a dynamic hibernate project with Maven to define a POJO class Users (with annotation). Take userid,username,city from user and print all details on the
    Web Page.
    
ANS.   Users_27.java

       package Assi27;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "TABLE27")
public class Users_27 

{

	@Id
	@Column(name = "UserId")
	public int userid;
	
	@Column(name = "UserName")
	public String username;
	
	@Column(name = "UserCity")
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public Users_27(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}

	public Users_27() {
		super();
	}	
}
---------------

     TestUsers.java
     
     package Assi27;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import Assi26.Users;

/**
 * Servlet implementation class TestUsers
 */
public class TestUsers extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TestUsers() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
PrintWriter out=response.getWriter();
		
		int ui=Integer.parseInt(request.getParameter("ui"));
		
		String un=request.getParameter("un");
		
		String uc=request.getParameter("uc");
		
	    Users_27 u1=new Users_27();
	    
	    u1.setUserid(ui);
	    
	    u1.setUsername(un);
	    
	    u1.setUsercity(uc);
			
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(Users_27.class).buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		s.save(u1);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("DATA IS :"+u1.getUserid()+" "+u1.getUsername()+" "+u1.getUsercity());
			
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
------------------

      hibernate.cfg.xml
      
      <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property> 
    </session-factory>
</hibernate-configuration>
   
    =========================================================================================================================================================
30. Create a JDBC project in spring to insert employee record like eid,ename,salary,city in the database table. Save 5 employee records and Display all records from the 
    table.

-->
EmpRecords.java

      package Assi30;

public class EmpRecords 

{

	public int eid;
	
	public String ename;
	
	public int esalary;
	
	public String ecity;

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public int getEsalary() {
		return esalary;
	}

	public void setEsalary(int esalary) {
		this.esalary = esalary;
	}

	public String getEcity() {
		return ecity;
	}

	public void setEcity(String ecity) {
		this.ecity = ecity;
	}

	public EmpRecords(int eid, String ename, int esalary, String ecity) {
		super();
		this.eid = eid;
		this.ename = ename;
		this.esalary = esalary;
		this.ecity = ecity;
	}

	public EmpRecords() {
		super();
	}	
}
--------------

     EmpDao.java
     
     package Assi30;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;


public class EmpDao 

{

	private JdbcTemplate jdbctemplate;

	public void setJdbctemplate(JdbcTemplate jdbctemplate) {
		this.jdbctemplate = jdbctemplate;
	}
	
	public int saveEmpRecords(EmpRecords e)
	
	{
		
		String q="insert into TABLE30 values("+e.getEid()+",'"+e.getEname()+"', "+e.getEsalary()+",'" +e.getEcity()+"')";
		
		return jdbctemplate.update(q);
	}

	 public List<EmpRecords> getEmpRecords() 
	 
	 {
		    String query="select * from TABLE30";
			List<EmpRecords> l=jdbctemplate.query(query,new EmpMapper());
			return l;
	 }
	
}
------------------

    EmpMapper.java
    
    package Assi30;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

public class EmpMapper implements RowMapper<EmpRecords>

{

	@Override
	public EmpRecords mapRow(ResultSet rs, int rownm) throws SQLException 
	
	{
		
		EmpRecords er=new EmpRecords();
		er.setEid(rs.getInt("eid"));
		er.setEname(rs.getString("ename"));
		er.setEsalary(rs.getInt("esalary"));
		er.setEcity(rs.getString("ecity"));
		return er;
		
	}

}
-----------------------

     TestMain.java
     
     package Assi30;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class TestEmp {

	public static void main(String[] args) 
	
	{
	
        ApplicationContext ctx=new ClassPathXmlApplicationContext("JdbcApplicationContext.xml");
		
		EmpDao dao=(EmpDao)ctx.getBean("edao1");
		
        int status=dao.saveEmpRecords(new EmpRecords(201,"Nimesh",15000,"Kerala"));
		
		System.out.println(status);
		
        List<EmpRecords> l=dao.getEmpRecords();
		
		for (EmpRecords emprecords : l)
			
		{
			
			System.out.println(emprecords.getEid()+" "+emprecords.getEname()+" "+emprecords.getEsalary()+" "+emprecords.getEcity());
			
		}
		
	}

}
-----------------

     JdbcApplicationContext.xml
     
     <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
  <bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />  
<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />  
<property name="username" value="system" />  
<property name="password" value="jyotimunde" />  
</bean>  
  
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
<property name="dataSource" ref="ds"></property>  
</bean>  
  
<bean id="edao" class="Package1.EmployeeDao">  
<property name="jdbctemplate" ref="jdbcTemplate"></property>  
</bean>  

<bean id="edao1" class="Assi30.EmpDao">  
<property name="jdbctemplate" ref="jdbcTemplate"></property>  
</bean>  
</beans>



=====================================================================================================================================================





