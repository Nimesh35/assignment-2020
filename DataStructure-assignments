Q1)
#include<stdio.h>
#include<stdlib.h>

struct student
{
 char name[20];
 int rollno;
};
int main()
{
    struct student s1;
    strcpy(s1.name,"nimesh");
    s1.rollno=54;
    printf("name : %s,rollno : %d",s1.name,s1.rollno);
   
    
}
==============================================================================================================================
Q2)
#include<stdio.h>
#include<string.h>

struct student
 {
     int rollno;
     char name[30];
     
 };
 
int main()
{
    struct student *s1,s;
    s1=&s;
    
    s1->rollno=20;
    strcpy(s1->name,"Rahul");         

    printf("rollno :%d\n",s1->rollno);
    printf("name : %s\n",s1->name);
    
}
=========================================================================================================================
Q3)
#include<stdio.h>

struct employee
{
	int eid;
	char name[20];
	char city[20];
};

int main()
{
	struct employee e[3];
	char nm[20];
	char cy[20];
	int i;
	for(i=0;i<3;i++);
	{
		printf("enter id :");
		scanf("%d",&e[i].eid);
		
		fflush (stdin);
		printf("enter name :");
		gets(nm);
		strcpy(e[i].name,nm);
		
		fflush (stdin);
		printf("enter city :");
		gets(cy);
		strcpy(e[i].city,cy);
		fflush(stdin);
	}
	
	for(i=0;i<3;i++);
	{
		printf("id:%d, name:%s ,city:%s\n",e[i].eid,e[i].name,e[i].city);
	}
}
============================================================================================================================================
Q4)
#include<stdio.h>

int main()
{ 
 float num[]={1.2,1.3,1.4};
 float *p=num;
 
 int i;
 for(i=0;i<3;i++)
 {
 	printf("%.2f\t",*(p+i));n
 }
}
==========================================================================================================================================================
Q5
#include<stdio.h>

int main()
{
	int *p;
	
	p=(int*)malloc(sizeof(int));
	
	*p=400;
	
	printf("value : %d",*p);
	
	free(p);
}
=====================================================================================================================================================================
Q6
#include<stdio.h>
#include<stdlib.h>
#define SIZE 7


typedef struct st
{
int top;
char elements[SIZE];
}stack;


void initialize(stack *sp)
{
sp->top=-1;
}


void push(stack *sp,int item)
{
if(is_full(sp))
printf("\nstack overflow");
else
sp->elements[++sp->top]=item;
}


int pop(stack *sp)
{
int x;
if(is_empty(sp))
printf("\nstack underflow");
else
x=sp->elements[sp->top--];
return x;
}


int is_full(stack *sp)
{
if(sp->top==SIZE-1)
return 1;
else
return 0;
}


int is_empty(stack *sp)
{
if(sp->top== -1)
return 1;
else
return 0;
}


int main()
{
stack s1;
push(&s1,'N');
push(&s1,'I');
push(&s1,'M');
push(&s1,'E');
push(&s1,'S');
push(&s1,'H');
int i;
for(i=s1.top;i!=-1;--i)
{
printf("%c",s1.elements[i]);
}

}
==============================================================================================================================================================
Q7
#include<stdio.h>
#include<stdlib.h>
#define SIZE 5

typedef struct queue

{
int front;
int rear;
double elements[SIZE];
}queue;

void initialize(queue *qp)
{
qp->front=-1;
qp->rear=-1;
}
void add(queue *qp,double item)
{
if(qp->rear==SIZE-1)
printf("\nqueue overflow");
else
{
if(qp->front == -1)
qp->front=0;
qp->elements[++qp->rear]=item;
}
}
int rem(queue *qp)
{
char x;
if(qp->front==-1)
printf("\nqueue underflow");
else
x=qp->elements[qp->front++];
return x;
}

void display(queue *qp)
{
 int i;
 for(i=qp->front;i<=qp->rear;i++)
  {
    printf("double values : %lf\n",qp->elements[i]);
  }
}

int main()
{
queue *qp;
qp=(queue*)malloc(sizeof(queue));

initialize(qp);
add(qp,1);
add(qp,2);
add(qp,3);
add(qp,4);
add(qp,5);
display(qp);
}
==================================================================================================================================================
Q8
